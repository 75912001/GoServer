// Code generated by protoc-gen-go.
// source: common.proto
// DO NOT EDIT!

/*
Package common_msg is a generated protocol buffer package.

It is generated from these files:
	common.proto

It has these top-level messages:
	ListServT
	MapT
	FairylandLineupT
	UserLineupT
	ResourceLineupT
	PrivateMapPosT
	PrivateMapT
	LoadUserT
	EventT
	MountT
	MountCfgT
	HeroT
	OfflineUserPrivateMapT
	SoldierT
	SoldierLevelT
	CliOfflineUserPrivateMapT
	MailT
	MapUserT
	TaskT
	ItemT
	ItemCfgT
	EquipmentT
	EquipmentCfgT
	PveIngRewardT
	RewardT
	BuildingT
	EmbattleT
	EmbattlePosT
*/
package common_msg

import proto "github.com/golang/protobuf/proto"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = math.Inf

// ////////////////////////////////////////////
// 错误码
// ////////////////////////////////////////////
type E_ERROR_CODE int32

const (
	// 通用错误
	E_ERROR_CODE_EEC_SUCCESS                                         E_ERROR_CODE = 0
	E_ERROR_CODE_EEC_ERROR                                           E_ERROR_CODE = 1
	E_ERROR_CODE_EEC_VALUE_INVALID                                   E_ERROR_CODE = 2
	E_ERROR_CODE_EEC_LOGIN_T                                         E_ERROR_CODE = 3
	E_ERROR_CODE_EEC_INEXISTENT_ITEM                                 E_ERROR_CODE = 4
	E_ERROR_CODE_EEC_INEXISTENT_USER                                 E_ERROR_CODE = 5
	E_ERROR_CODE_EEC_EXISTENT_ROLE                                   E_ERROR_CODE = 6
	E_ERROR_CODE_EEC_INEXISTENT_ACCOUNT                              E_ERROR_CODE = 7
	E_ERROR_CODE_EEC_NO_APPROVED                                     E_ERROR_CODE = 8
	E_ERROR_CODE_EEC_EVENT_LIMIT                                     E_ERROR_CODE = 9
	E_ERROR_CODE_EEC_USER_LEVEL                                      E_ERROR_CODE = 10
	E_ERROR_CODE_EEC_USER_BTL                                        E_ERROR_CODE = 11
	E_ERROR_CODE_EEC_USER_IN_CURRENT_MAP                             E_ERROR_CODE = 12
	E_ERROR_CODE_EEC_MAP_INVALID                                     E_ERROR_CODE = 13
	E_ERROR_CODE_EEC_PASSWORD                                        E_ERROR_CODE = 14
	E_ERROR_CODE_EEC_CHAT_LEN_MAX                                    E_ERROR_CODE = 15
	E_ERROR_CODE_EEC_MOUNT_USED                                      E_ERROR_CODE = 16
	E_ERROR_CODE_EEC_MOUNT_INEXISTENT                                E_ERROR_CODE = 17
	E_ERROR_CODE_EEC_MOUNT_UNUSED                                    E_ERROR_CODE = 18
	E_ERROR_CODE_EEC_NO_TASK                                         E_ERROR_CODE = 19
	E_ERROR_CODE_EEC_NO_TASK_FINISH                                  E_ERROR_CODE = 20
	E_ERROR_CODE_EEC_NO_TASK_REWARD                                  E_ERROR_CODE = 21
	E_ERROR_CODE_EEC_CLI_EVENT_TYPE                                  E_ERROR_CODE = 22
	E_ERROR_CODE_EEC_MAIL_INEXISTENT                                 E_ERROR_CODE = 23
	E_ERROR_CODE_EEC_MAIL_ATTACHMENT_INEXISTENT                      E_ERROR_CODE = 24
	E_ERROR_CODE_EEC_USER_NO_BTL                                     E_ERROR_CODE = 27
	E_ERROR_CODE_EEC_GET_FORAGE_TIME_ERR                             E_ERROR_CODE = 30
	E_ERROR_CODE_EEC_GET_FORAGE_EXISTENT                             E_ERROR_CODE = 31
	E_ERROR_CODE_EEC_FORAGE_CNT                                      E_ERROR_CODE = 32
	E_ERROR_CODE_EEC_EQUIPMENT_INEXISTENT                            E_ERROR_CODE = 33
	E_ERROR_CODE_EEC_EQUIPMENT_ON                                    E_ERROR_CODE = 34
	E_ERROR_CODE_EEC_HERO_INEXISTENT                                 E_ERROR_CODE = 35
	E_ERROR_CODE_EEC_HERO_EQUIPMENT_POS                              E_ERROR_CODE = 36
	E_ERROR_CODE_EEC_EQUIPMENT_OFF                                   E_ERROR_CODE = 37
	E_ERROR_CODE_EEC_HERO_EQUIPMENT_POS_NO                           E_ERROR_CODE = 38
	E_ERROR_CODE_EEC_HERO_STAR_LEVEL_MAX                             E_ERROR_CODE = 40
	E_ERROR_CODE_EEC_ITEM_CNT                                        E_ERROR_CODE = 41
	E_ERROR_CODE_EEC_PEACH_CNT                                       E_ERROR_CODE = 42
	E_ERROR_CODE_EEC_EQUIPMENT_LEVEL_UP                              E_ERROR_CODE = 43
	E_ERROR_CODE_EEC_GOLD_CNT                                        E_ERROR_CODE = 44
	E_ERROR_CODE_EEC_HERO_INEXISTENT_IN_HERO_SKILL                   E_ERROR_CODE = 45
	E_ERROR_CODE_EEC_HERO_SKILL_INACTIVE                             E_ERROR_CODE = 46
	E_ERROR_CODE_EEC_HERO_SKILL_UP                                   E_ERROR_CODE = 47
	E_ERROR_CODE_EEC_HERO_EXISTENT                                   E_ERROR_CODE = 48
	E_ERROR_CODE_EEC_BUILDING_LEVEL_UP                               E_ERROR_CODE = 49
	E_ERROR_CODE_EEC_BUILDING_HALL_LEVEL                             E_ERROR_CODE = 50
	E_ERROR_CODE_EEC_SOLDIER_CNT_MAX                                 E_ERROR_CODE = 51
	E_ERROR_CODE_EEC_HERO_LEVEL                                      E_ERROR_CODE = 52
	E_ERROR_CODE_EEC_MAP_TYPE                                        E_ERROR_CODE = 53
	E_ERROR_CODE_EEC_PRIVATE_MAP_RESOURCE_BEFORE_THE_PRODUCTION_TIME E_ERROR_CODE = 54
	E_ERROR_CODE_EEC_PRIVATE_MAP_USER_IN                             E_ERROR_CODE = 55
	E_ERROR_CODE_EEC_INGOTS_CNT                                      E_ERROR_CODE = 56
	E_ERROR_CODE_EEC_ERROR_MYSQL                                     E_ERROR_CODE = 6000
	E_ERROR_CODE_EEC_MAX                                             E_ERROR_CODE = 10000
)

var E_ERROR_CODE_name = map[int32]string{
	0:     "EEC_SUCCESS",
	1:     "EEC_ERROR",
	2:     "EEC_VALUE_INVALID",
	3:     "EEC_LOGIN_T",
	4:     "EEC_INEXISTENT_ITEM",
	5:     "EEC_INEXISTENT_USER",
	6:     "EEC_EXISTENT_ROLE",
	7:     "EEC_INEXISTENT_ACCOUNT",
	8:     "EEC_NO_APPROVED",
	9:     "EEC_EVENT_LIMIT",
	10:    "EEC_USER_LEVEL",
	11:    "EEC_USER_BTL",
	12:    "EEC_USER_IN_CURRENT_MAP",
	13:    "EEC_MAP_INVALID",
	14:    "EEC_PASSWORD",
	15:    "EEC_CHAT_LEN_MAX",
	16:    "EEC_MOUNT_USED",
	17:    "EEC_MOUNT_INEXISTENT",
	18:    "EEC_MOUNT_UNUSED",
	19:    "EEC_NO_TASK",
	20:    "EEC_NO_TASK_FINISH",
	21:    "EEC_NO_TASK_REWARD",
	22:    "EEC_CLI_EVENT_TYPE",
	23:    "EEC_MAIL_INEXISTENT",
	24:    "EEC_MAIL_ATTACHMENT_INEXISTENT",
	27:    "EEC_USER_NO_BTL",
	30:    "EEC_GET_FORAGE_TIME_ERR",
	31:    "EEC_GET_FORAGE_EXISTENT",
	32:    "EEC_FORAGE_CNT",
	33:    "EEC_EQUIPMENT_INEXISTENT",
	34:    "EEC_EQUIPMENT_ON",
	35:    "EEC_HERO_INEXISTENT",
	36:    "EEC_HERO_EQUIPMENT_POS",
	37:    "EEC_EQUIPMENT_OFF",
	38:    "EEC_HERO_EQUIPMENT_POS_NO",
	40:    "EEC_HERO_STAR_LEVEL_MAX",
	41:    "EEC_ITEM_CNT",
	42:    "EEC_PEACH_CNT",
	43:    "EEC_EQUIPMENT_LEVEL_UP",
	44:    "EEC_GOLD_CNT",
	45:    "EEC_HERO_INEXISTENT_IN_HERO_SKILL",
	46:    "EEC_HERO_SKILL_INACTIVE",
	47:    "EEC_HERO_SKILL_UP",
	48:    "EEC_HERO_EXISTENT",
	49:    "EEC_BUILDING_LEVEL_UP",
	50:    "EEC_BUILDING_HALL_LEVEL",
	51:    "EEC_SOLDIER_CNT_MAX",
	52:    "EEC_HERO_LEVEL",
	53:    "EEC_MAP_TYPE",
	54:    "EEC_PRIVATE_MAP_RESOURCE_BEFORE_THE_PRODUCTION_TIME",
	55:    "EEC_PRIVATE_MAP_USER_IN",
	56:    "EEC_INGOTS_CNT",
	6000:  "EEC_ERROR_MYSQL",
	10000: "EEC_MAX",
}
var E_ERROR_CODE_value = map[string]int32{
	"EEC_SUCCESS":                                         0,
	"EEC_ERROR":                                           1,
	"EEC_VALUE_INVALID":                                   2,
	"EEC_LOGIN_T":                                         3,
	"EEC_INEXISTENT_ITEM":                                 4,
	"EEC_INEXISTENT_USER":                                 5,
	"EEC_EXISTENT_ROLE":                                   6,
	"EEC_INEXISTENT_ACCOUNT":                              7,
	"EEC_NO_APPROVED":                                     8,
	"EEC_EVENT_LIMIT":                                     9,
	"EEC_USER_LEVEL":                                      10,
	"EEC_USER_BTL":                                        11,
	"EEC_USER_IN_CURRENT_MAP":                             12,
	"EEC_MAP_INVALID":                                     13,
	"EEC_PASSWORD":                                        14,
	"EEC_CHAT_LEN_MAX":                                    15,
	"EEC_MOUNT_USED":                                      16,
	"EEC_MOUNT_INEXISTENT":                                17,
	"EEC_MOUNT_UNUSED":                                    18,
	"EEC_NO_TASK":                                         19,
	"EEC_NO_TASK_FINISH":                                  20,
	"EEC_NO_TASK_REWARD":                                  21,
	"EEC_CLI_EVENT_TYPE":                                  22,
	"EEC_MAIL_INEXISTENT":                                 23,
	"EEC_MAIL_ATTACHMENT_INEXISTENT":                      24,
	"EEC_USER_NO_BTL":                                     27,
	"EEC_GET_FORAGE_TIME_ERR":                             30,
	"EEC_GET_FORAGE_EXISTENT":                             31,
	"EEC_FORAGE_CNT":                                      32,
	"EEC_EQUIPMENT_INEXISTENT":                            33,
	"EEC_EQUIPMENT_ON":                                    34,
	"EEC_HERO_INEXISTENT":                                 35,
	"EEC_HERO_EQUIPMENT_POS":                              36,
	"EEC_EQUIPMENT_OFF":                                   37,
	"EEC_HERO_EQUIPMENT_POS_NO":                           38,
	"EEC_HERO_STAR_LEVEL_MAX":                             40,
	"EEC_ITEM_CNT":                                        41,
	"EEC_PEACH_CNT":                                       42,
	"EEC_EQUIPMENT_LEVEL_UP":                              43,
	"EEC_GOLD_CNT":                                        44,
	"EEC_HERO_INEXISTENT_IN_HERO_SKILL":                   45,
	"EEC_HERO_SKILL_INACTIVE":                             46,
	"EEC_HERO_SKILL_UP":                                   47,
	"EEC_HERO_EXISTENT":                                   48,
	"EEC_BUILDING_LEVEL_UP":                               49,
	"EEC_BUILDING_HALL_LEVEL":                             50,
	"EEC_SOLDIER_CNT_MAX":                                 51,
	"EEC_HERO_LEVEL":                                      52,
	"EEC_MAP_TYPE":                                        53,
	"EEC_PRIVATE_MAP_RESOURCE_BEFORE_THE_PRODUCTION_TIME": 54,
	"EEC_PRIVATE_MAP_USER_IN":                             55,
	"EEC_INGOTS_CNT":                                      56,
	"EEC_ERROR_MYSQL":                                     6000,
	"EEC_MAX":                                             10000,
}

func (x E_ERROR_CODE) Enum() *E_ERROR_CODE {
	p := new(E_ERROR_CODE)
	*p = x
	return p
}
func (x E_ERROR_CODE) String() string {
	return proto.EnumName(E_ERROR_CODE_name, int32(x))
}
func (x *E_ERROR_CODE) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(E_ERROR_CODE_value, data, "E_ERROR_CODE")
	if err != nil {
		return err
	}
	*x = E_ERROR_CODE(value)
	return nil
}

type USER_EVENT_TYPE int32

const (
	// ----------------------------------------------------------------------------
	// 每日事件 DAILY_EVENT_XX
	USER_EVENT_TYPE_DAILY_EVENT_BEGIN USER_EVENT_TYPE = 100000
	USER_EVENT_TYPE_DAILY_GET_FORAGE  USER_EVENT_TYPE = 100300
	USER_EVENT_TYPE_DAILY_EVENT_END   USER_EVENT_TYPE = 199999
	// ----------------------------------------------------------------------------
	// 每周事件 WEEKLY_EVENT_XX
	USER_EVENT_TYPE_WEEKLY_EVENT_BEGIN USER_EVENT_TYPE = 200000
	USER_EVENT_TYPE_WEEKLY_EVENT_END   USER_EVENT_TYPE = 299999
	// ----------------------------------------------------------------------------
	// 每月事件 MONTHLY_EVENT_XX
	USER_EVENT_TYPE_MONTHLY_EVENT_BEGIN USER_EVENT_TYPE = 300000
	USER_EVENT_TYPE_MONTHLY_EVENT_END   USER_EVENT_TYPE = 399999
	// ----------------------------------------------------------------------------
	// 永久事件 FOREVER_EVENT_XX
	USER_EVENT_TYPE_FOREVER_EVENT_BEGIN             USER_EVENT_TYPE = 400000
	USER_EVENT_TYPE_FOREVER_EVENT_TASK              USER_EVENT_TYPE = 400001
	USER_EVENT_TYPE_FOREVER_EVENT_EQUIPMENT_IDX     USER_EVENT_TYPE = 400002
	USER_EVENT_TYPE_FOREVER_EVENT_FAIRYLAND         USER_EVENT_TYPE = 400003
	USER_EVENT_TYPE_FOREVER_EVENT_BUILDING_LEVEL    USER_EVENT_TYPE = 400004
	USER_EVENT_TYPE_FOREVER_EVENT_SOLDIER_ACTIVATE  USER_EVENT_TYPE = 400005
	USER_EVENT_TYPE_FOREVER_EVENT_SOLDIER_CNT       USER_EVENT_TYPE = 400006
	USER_EVENT_TYPE_FOREVER_EVENT_PRIVATE_MAP       USER_EVENT_TYPE = 400007
	USER_EVENT_TYPE_FOREVER_EVENT_COMMON_MAP        USER_EVENT_TYPE = 400008
	USER_EVENT_TYPE_FOREVER_EVENT_PRIVATE_MAP_TIME  USER_EVENT_TYPE = 400009
	USER_EVENT_TYPE_FOREVER_EVENT_UPDATE_LINEUP     USER_EVENT_TYPE = 400010
	USER_EVENT_TYPE_FOREVER_EVENT_FAIRYLAND_LINEUP  USER_EVENT_TYPE = 400011
	USER_EVENT_TYPE_FOREVER_EVENT_PRIVATE_BTL_SCENE USER_EVENT_TYPE = 400012
	USER_EVENT_TYPE_FOREVER_EVENT_SOLDIER_LEVEL     USER_EVENT_TYPE = 400013
	// [400100-400500]
	USER_EVENT_TYPE_FOREVER_EVENT_PRIVATE_MAP_DATA_BEGIN USER_EVENT_TYPE = 400100
	USER_EVENT_TYPE_FOREVER_EVENT_PRIVATE_MAP_DATA       USER_EVENT_TYPE = 400101
	// str_data:字符串数据(owner_uid,get_resource_time,lineup_id,hero[15],data[btl scene id])
	USER_EVENT_TYPE_FOREVER_EVENT_PRIVATE_MAP_DATA_END USER_EVENT_TYPE = 400500
	USER_EVENT_TYPE_FOREVER_EVENT_CLI_START            USER_EVENT_TYPE = 480000
	// 	//不关心,只占位.具体由客户端自行查询和存储...
	USER_EVENT_TYPE_FOREVER_EVENT_CLI_END USER_EVENT_TYPE = 489999
	USER_EVENT_TYPE_FOREVER_EVENT_SYS_UID USER_EVENT_TYPE = 490000
	USER_EVENT_TYPE_FOREVER_EVENT_END     USER_EVENT_TYPE = 499999
	// ----------------------------------------------------------------------------
	// 过期事件 EXPRIE_EVENT_XX
	USER_EVENT_TYPE_EXPRIE_EVENT_BEGIN USER_EVENT_TYPE = 500000
	USER_EVENT_TYPE_EXPRIE_EVENT_END   USER_EVENT_TYPE = 599999
)

var USER_EVENT_TYPE_name = map[int32]string{
	100000: "DAILY_EVENT_BEGIN",
	100300: "DAILY_GET_FORAGE",
	199999: "DAILY_EVENT_END",
	200000: "WEEKLY_EVENT_BEGIN",
	299999: "WEEKLY_EVENT_END",
	300000: "MONTHLY_EVENT_BEGIN",
	399999: "MONTHLY_EVENT_END",
	400000: "FOREVER_EVENT_BEGIN",
	400001: "FOREVER_EVENT_TASK",
	400002: "FOREVER_EVENT_EQUIPMENT_IDX",
	400003: "FOREVER_EVENT_FAIRYLAND",
	400004: "FOREVER_EVENT_BUILDING_LEVEL",
	400005: "FOREVER_EVENT_SOLDIER_ACTIVATE",
	400006: "FOREVER_EVENT_SOLDIER_CNT",
	400007: "FOREVER_EVENT_PRIVATE_MAP",
	400008: "FOREVER_EVENT_COMMON_MAP",
	400009: "FOREVER_EVENT_PRIVATE_MAP_TIME",
	400010: "FOREVER_EVENT_UPDATE_LINEUP",
	400011: "FOREVER_EVENT_FAIRYLAND_LINEUP",
	400012: "FOREVER_EVENT_PRIVATE_BTL_SCENE",
	400013: "FOREVER_EVENT_SOLDIER_LEVEL",
	400100: "FOREVER_EVENT_PRIVATE_MAP_DATA_BEGIN",
	400101: "FOREVER_EVENT_PRIVATE_MAP_DATA",
	400500: "FOREVER_EVENT_PRIVATE_MAP_DATA_END",
	480000: "FOREVER_EVENT_CLI_START",
	489999: "FOREVER_EVENT_CLI_END",
	490000: "FOREVER_EVENT_SYS_UID",
	499999: "FOREVER_EVENT_END",
	500000: "EXPRIE_EVENT_BEGIN",
	599999: "EXPRIE_EVENT_END",
}
var USER_EVENT_TYPE_value = map[string]int32{
	"DAILY_EVENT_BEGIN":                    100000,
	"DAILY_GET_FORAGE":                     100300,
	"DAILY_EVENT_END":                      199999,
	"WEEKLY_EVENT_BEGIN":                   200000,
	"WEEKLY_EVENT_END":                     299999,
	"MONTHLY_EVENT_BEGIN":                  300000,
	"MONTHLY_EVENT_END":                    399999,
	"FOREVER_EVENT_BEGIN":                  400000,
	"FOREVER_EVENT_TASK":                   400001,
	"FOREVER_EVENT_EQUIPMENT_IDX":          400002,
	"FOREVER_EVENT_FAIRYLAND":              400003,
	"FOREVER_EVENT_BUILDING_LEVEL":         400004,
	"FOREVER_EVENT_SOLDIER_ACTIVATE":       400005,
	"FOREVER_EVENT_SOLDIER_CNT":            400006,
	"FOREVER_EVENT_PRIVATE_MAP":            400007,
	"FOREVER_EVENT_COMMON_MAP":             400008,
	"FOREVER_EVENT_PRIVATE_MAP_TIME":       400009,
	"FOREVER_EVENT_UPDATE_LINEUP":          400010,
	"FOREVER_EVENT_FAIRYLAND_LINEUP":       400011,
	"FOREVER_EVENT_PRIVATE_BTL_SCENE":      400012,
	"FOREVER_EVENT_SOLDIER_LEVEL":          400013,
	"FOREVER_EVENT_PRIVATE_MAP_DATA_BEGIN": 400100,
	"FOREVER_EVENT_PRIVATE_MAP_DATA":       400101,
	"FOREVER_EVENT_PRIVATE_MAP_DATA_END":   400500,
	"FOREVER_EVENT_CLI_START":              480000,
	"FOREVER_EVENT_CLI_END":                489999,
	"FOREVER_EVENT_SYS_UID":                490000,
	"FOREVER_EVENT_END":                    499999,
	"EXPRIE_EVENT_BEGIN":                   500000,
	"EXPRIE_EVENT_END":                     599999,
}

func (x USER_EVENT_TYPE) Enum() *USER_EVENT_TYPE {
	p := new(USER_EVENT_TYPE)
	*p = x
	return p
}
func (x USER_EVENT_TYPE) String() string {
	return proto.EnumName(USER_EVENT_TYPE_name, int32(x))
}
func (x *USER_EVENT_TYPE) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(USER_EVENT_TYPE_value, data, "USER_EVENT_TYPE")
	if err != nil {
		return err
	}
	*x = USER_EVENT_TYPE(value)
	return nil
}

// 平台类型
type E_PLATFORM int32

const (
	E_PLATFORM_E_PLATFORM_TEST E_PLATFORM = 0
)

var E_PLATFORM_name = map[int32]string{
	0: "E_PLATFORM_TEST",
}
var E_PLATFORM_value = map[string]int32{
	"E_PLATFORM_TEST": 0,
}

func (x E_PLATFORM) Enum() *E_PLATFORM {
	p := new(E_PLATFORM)
	*p = x
	return p
}
func (x E_PLATFORM) String() string {
	return proto.EnumName(E_PLATFORM_name, int32(x))
}
func (x *E_PLATFORM) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(E_PLATFORM_value, data, "E_PLATFORM")
	if err != nil {
		return err
	}
	*x = E_PLATFORM(value)
	return nil
}

// 聊天类型
type E_CHAT_TYPE int32

const (
	E_CHAT_TYPE_E_CHAT_TYPE_PRIVATE E_CHAT_TYPE = 0
	E_CHAT_TYPE_E_CHAT_TYPE_MAP     E_CHAT_TYPE = 1
	E_CHAT_TYPE_E_CHAT_TYPE_ALL     E_CHAT_TYPE = 2
)

var E_CHAT_TYPE_name = map[int32]string{
	0: "E_CHAT_TYPE_PRIVATE",
	1: "E_CHAT_TYPE_MAP",
	2: "E_CHAT_TYPE_ALL",
}
var E_CHAT_TYPE_value = map[string]int32{
	"E_CHAT_TYPE_PRIVATE": 0,
	"E_CHAT_TYPE_MAP":     1,
	"E_CHAT_TYPE_ALL":     2,
}

func (x E_CHAT_TYPE) Enum() *E_CHAT_TYPE {
	p := new(E_CHAT_TYPE)
	*p = x
	return p
}
func (x E_CHAT_TYPE) String() string {
	return proto.EnumName(E_CHAT_TYPE_name, int32(x))
}
func (x *E_CHAT_TYPE) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(E_CHAT_TYPE_value, data, "E_CHAT_TYPE")
	if err != nil {
		return err
	}
	*x = E_CHAT_TYPE(value)
	return nil
}

// 地图类型
type E_MAP_TYPE int32

const (
	E_MAP_TYPE_E_MAP_TYPE_PRIVATE E_MAP_TYPE = 0
	E_MAP_TYPE_E_MAP_TYPE_COMMON  E_MAP_TYPE = 1
	E_MAP_TYPE_E_MAP_TYPE_BTL     E_MAP_TYPE = 2
)

var E_MAP_TYPE_name = map[int32]string{
	0: "E_MAP_TYPE_PRIVATE",
	1: "E_MAP_TYPE_COMMON",
	2: "E_MAP_TYPE_BTL",
}
var E_MAP_TYPE_value = map[string]int32{
	"E_MAP_TYPE_PRIVATE": 0,
	"E_MAP_TYPE_COMMON":  1,
	"E_MAP_TYPE_BTL":     2,
}

func (x E_MAP_TYPE) Enum() *E_MAP_TYPE {
	p := new(E_MAP_TYPE)
	*p = x
	return p
}
func (x E_MAP_TYPE) String() string {
	return proto.EnumName(E_MAP_TYPE_name, int32(x))
}
func (x *E_MAP_TYPE) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(E_MAP_TYPE_value, data, "E_MAP_TYPE")
	if err != nil {
		return err
	}
	*x = E_MAP_TYPE(value)
	return nil
}

type E_PRIVATE_MAP_POS_TYPE int32

const (
	E_PRIVATE_MAP_POS_TYPE_E_PRIVATE_MAP_POS_RESOURCE E_PRIVATE_MAP_POS_TYPE = 0
	E_PRIVATE_MAP_POS_TYPE_E_PRIVATE_MAP_POS_MONSTER  E_PRIVATE_MAP_POS_TYPE = 1
	E_PRIVATE_MAP_POS_TYPE_E_PRIVATE_MAP_POS_BOSS     E_PRIVATE_MAP_POS_TYPE = 2
	E_PRIVATE_MAP_POS_TYPE_E_PRIVATE_MAP_POS_ITEM     E_PRIVATE_MAP_POS_TYPE = 3
)

var E_PRIVATE_MAP_POS_TYPE_name = map[int32]string{
	0: "E_PRIVATE_MAP_POS_RESOURCE",
	1: "E_PRIVATE_MAP_POS_MONSTER",
	2: "E_PRIVATE_MAP_POS_BOSS",
	3: "E_PRIVATE_MAP_POS_ITEM",
}
var E_PRIVATE_MAP_POS_TYPE_value = map[string]int32{
	"E_PRIVATE_MAP_POS_RESOURCE": 0,
	"E_PRIVATE_MAP_POS_MONSTER":  1,
	"E_PRIVATE_MAP_POS_BOSS":     2,
	"E_PRIVATE_MAP_POS_ITEM":     3,
}

func (x E_PRIVATE_MAP_POS_TYPE) Enum() *E_PRIVATE_MAP_POS_TYPE {
	p := new(E_PRIVATE_MAP_POS_TYPE)
	*p = x
	return p
}
func (x E_PRIVATE_MAP_POS_TYPE) String() string {
	return proto.EnumName(E_PRIVATE_MAP_POS_TYPE_name, int32(x))
}
func (x *E_PRIVATE_MAP_POS_TYPE) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(E_PRIVATE_MAP_POS_TYPE_value, data, "E_PRIVATE_MAP_POS_TYPE")
	if err != nil {
		return err
	}
	*x = E_PRIVATE_MAP_POS_TYPE(value)
	return nil
}

// 坐骑状态
type E_MOUNT_STATE int32

const (
	E_MOUNT_STATE_E_MOUNT_STATE_UNUSED E_MOUNT_STATE = 0
	E_MOUNT_STATE_E_MOUNT_STATE_USED   E_MOUNT_STATE = 1
)

var E_MOUNT_STATE_name = map[int32]string{
	0: "E_MOUNT_STATE_UNUSED",
	1: "E_MOUNT_STATE_USED",
}
var E_MOUNT_STATE_value = map[string]int32{
	"E_MOUNT_STATE_UNUSED": 0,
	"E_MOUNT_STATE_USED":   1,
}

func (x E_MOUNT_STATE) Enum() *E_MOUNT_STATE {
	p := new(E_MOUNT_STATE)
	*p = x
	return p
}
func (x E_MOUNT_STATE) String() string {
	return proto.EnumName(E_MOUNT_STATE_name, int32(x))
}
func (x *E_MOUNT_STATE) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(E_MOUNT_STATE_value, data, "E_MOUNT_STATE")
	if err != nil {
		return err
	}
	*x = E_MOUNT_STATE(value)
	return nil
}

// 任务类型
type E_TASK_TYPE int32

const (
	E_TASK_TYPE_E_TASK_TYPE_KILL E_TASK_TYPE = 1
)

var E_TASK_TYPE_name = map[int32]string{
	1: "E_TASK_TYPE_KILL",
}
var E_TASK_TYPE_value = map[string]int32{
	"E_TASK_TYPE_KILL": 1,
}

func (x E_TASK_TYPE) Enum() *E_TASK_TYPE {
	p := new(E_TASK_TYPE)
	*p = x
	return p
}
func (x E_TASK_TYPE) String() string {
	return proto.EnumName(E_TASK_TYPE_name, int32(x))
}
func (x *E_TASK_TYPE) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(E_TASK_TYPE_value, data, "E_TASK_TYPE")
	if err != nil {
		return err
	}
	*x = E_TASK_TYPE(value)
	return nil
}

// 任务状态
type E_TASK_STATE int32

const (
	E_TASK_STATE_E_TASK_STATE_FINISH E_TASK_STATE = 2000000000
	E_TASK_STATE_E_TASK_STATE_REWARD E_TASK_STATE = 2000000001
)

var E_TASK_STATE_name = map[int32]string{
	2000000000: "E_TASK_STATE_FINISH",
	2000000001: "E_TASK_STATE_REWARD",
}
var E_TASK_STATE_value = map[string]int32{
	"E_TASK_STATE_FINISH": 2000000000,
	"E_TASK_STATE_REWARD": 2000000001,
}

func (x E_TASK_STATE) Enum() *E_TASK_STATE {
	p := new(E_TASK_STATE)
	*p = x
	return p
}
func (x E_TASK_STATE) String() string {
	return proto.EnumName(E_TASK_STATE_name, int32(x))
}
func (x *E_TASK_STATE) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(E_TASK_STATE_value, data, "E_TASK_STATE")
	if err != nil {
		return err
	}
	*x = E_TASK_STATE(value)
	return nil
}

// 邮件状态
type E_MAIL_STATE int32

const (
	E_MAIL_STATE_E_MAIL_STATE_UNREAD E_MAIL_STATE = 0
	E_MAIL_STATE_E_MAIL_STATE_READ   E_MAIL_STATE = 1
)

var E_MAIL_STATE_name = map[int32]string{
	0: "E_MAIL_STATE_UNREAD",
	1: "E_MAIL_STATE_READ",
}
var E_MAIL_STATE_value = map[string]int32{
	"E_MAIL_STATE_UNREAD": 0,
	"E_MAIL_STATE_READ":   1,
}

func (x E_MAIL_STATE) Enum() *E_MAIL_STATE {
	p := new(E_MAIL_STATE)
	*p = x
	return p
}
func (x E_MAIL_STATE) String() string {
	return proto.EnumName(E_MAIL_STATE_name, int32(x))
}
func (x *E_MAIL_STATE) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(E_MAIL_STATE_value, data, "E_MAIL_STATE")
	if err != nil {
		return err
	}
	*x = E_MAIL_STATE(value)
	return nil
}

// 通用值
type E_COMMON_VAL int32

const (
	E_COMMON_VAL_E_COMMON_HERO_STAR_MAX             E_COMMON_VAL = 5
	E_COMMON_VAL_E_COMMON_USER_LINEUP_DATA_CNT      E_COMMON_VAL = 16
	E_COMMON_VAL_E_COMMON_USER_LINEUP_HERO_CNT_MAX  E_COMMON_VAL = 3
	E_COMMON_VAL_E_COMMON_PRIVATE_MAP_RESOURCES_CNT E_COMMON_VAL = 4
)

var E_COMMON_VAL_name = map[int32]string{
	5:  "E_COMMON_HERO_STAR_MAX",
	16: "E_COMMON_USER_LINEUP_DATA_CNT",
	3:  "E_COMMON_USER_LINEUP_HERO_CNT_MAX",
	4:  "E_COMMON_PRIVATE_MAP_RESOURCES_CNT",
}
var E_COMMON_VAL_value = map[string]int32{
	"E_COMMON_HERO_STAR_MAX":             5,
	"E_COMMON_USER_LINEUP_DATA_CNT":      16,
	"E_COMMON_USER_LINEUP_HERO_CNT_MAX":  3,
	"E_COMMON_PRIVATE_MAP_RESOURCES_CNT": 4,
}

func (x E_COMMON_VAL) Enum() *E_COMMON_VAL {
	p := new(E_COMMON_VAL)
	*p = x
	return p
}
func (x E_COMMON_VAL) String() string {
	return proto.EnumName(E_COMMON_VAL_name, int32(x))
}
func (x *E_COMMON_VAL) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(E_COMMON_VAL_value, data, "E_COMMON_VAL")
	if err != nil {
		return err
	}
	*x = E_COMMON_VAL(value)
	return nil
}

// 装备位置
// 1 武器
// 2 衣服
// 3 裤子
// 4 饰品
// 5 法宝
type E_EQUIPMENT_POSITION int32

const (
	E_EQUIPMENT_POSITION_E_EQUIPMENT_POSITION_1 E_EQUIPMENT_POSITION = 1
	E_EQUIPMENT_POSITION_E_EQUIPMENT_POSITION_2 E_EQUIPMENT_POSITION = 2
	E_EQUIPMENT_POSITION_E_EQUIPMENT_POSITION_3 E_EQUIPMENT_POSITION = 3
	E_EQUIPMENT_POSITION_E_EQUIPMENT_POSITION_4 E_EQUIPMENT_POSITION = 4
	E_EQUIPMENT_POSITION_E_EQUIPMENT_POSITION_5 E_EQUIPMENT_POSITION = 5
)

var E_EQUIPMENT_POSITION_name = map[int32]string{
	1: "E_EQUIPMENT_POSITION_1",
	2: "E_EQUIPMENT_POSITION_2",
	3: "E_EQUIPMENT_POSITION_3",
	4: "E_EQUIPMENT_POSITION_4",
	5: "E_EQUIPMENT_POSITION_5",
}
var E_EQUIPMENT_POSITION_value = map[string]int32{
	"E_EQUIPMENT_POSITION_1": 1,
	"E_EQUIPMENT_POSITION_2": 2,
	"E_EQUIPMENT_POSITION_3": 3,
	"E_EQUIPMENT_POSITION_4": 4,
	"E_EQUIPMENT_POSITION_5": 5,
}

func (x E_EQUIPMENT_POSITION) Enum() *E_EQUIPMENT_POSITION {
	p := new(E_EQUIPMENT_POSITION)
	*p = x
	return p
}
func (x E_EQUIPMENT_POSITION) String() string {
	return proto.EnumName(E_EQUIPMENT_POSITION_name, int32(x))
}
func (x *E_EQUIPMENT_POSITION) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(E_EQUIPMENT_POSITION_value, data, "E_EQUIPMENT_POSITION")
	if err != nil {
		return err
	}
	*x = E_EQUIPMENT_POSITION(value)
	return nil
}

// [1-5 白兰紫橙绿]
type E_EQUIPMENT_QUALITY int32

const (
	E_EQUIPMENT_QUALITY_E_EQUIPMENT_QUALITY_1 E_EQUIPMENT_QUALITY = 1
	E_EQUIPMENT_QUALITY_E_EQUIPMENT_QUALITY_2 E_EQUIPMENT_QUALITY = 2
	E_EQUIPMENT_QUALITY_E_EQUIPMENT_QUALITY_3 E_EQUIPMENT_QUALITY = 3
	E_EQUIPMENT_QUALITY_E_EQUIPMENT_QUALITY_4 E_EQUIPMENT_QUALITY = 4
	E_EQUIPMENT_QUALITY_E_EQUIPMENT_QUALITY_5 E_EQUIPMENT_QUALITY = 5
)

var E_EQUIPMENT_QUALITY_name = map[int32]string{
	1: "E_EQUIPMENT_QUALITY_1",
	2: "E_EQUIPMENT_QUALITY_2",
	3: "E_EQUIPMENT_QUALITY_3",
	4: "E_EQUIPMENT_QUALITY_4",
	5: "E_EQUIPMENT_QUALITY_5",
}
var E_EQUIPMENT_QUALITY_value = map[string]int32{
	"E_EQUIPMENT_QUALITY_1": 1,
	"E_EQUIPMENT_QUALITY_2": 2,
	"E_EQUIPMENT_QUALITY_3": 3,
	"E_EQUIPMENT_QUALITY_4": 4,
	"E_EQUIPMENT_QUALITY_5": 5,
}

func (x E_EQUIPMENT_QUALITY) Enum() *E_EQUIPMENT_QUALITY {
	p := new(E_EQUIPMENT_QUALITY)
	*p = x
	return p
}
func (x E_EQUIPMENT_QUALITY) String() string {
	return proto.EnumName(E_EQUIPMENT_QUALITY_name, int32(x))
}
func (x *E_EQUIPMENT_QUALITY) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(E_EQUIPMENT_QUALITY_value, data, "E_EQUIPMENT_QUALITY")
	if err != nil {
		return err
	}
	*x = E_EQUIPMENT_QUALITY(value)
	return nil
}

type E_NPC_TYPE int32

const (
	E_NPC_TYPE_E_NPC_HERO    E_NPC_TYPE = 1
	E_NPC_TYPE_E_NPC_SOLDIER E_NPC_TYPE = 2
	E_NPC_TYPE_E_NPC_MONSTER E_NPC_TYPE = 3
)

var E_NPC_TYPE_name = map[int32]string{
	1: "E_NPC_HERO",
	2: "E_NPC_SOLDIER",
	3: "E_NPC_MONSTER",
}
var E_NPC_TYPE_value = map[string]int32{
	"E_NPC_HERO":    1,
	"E_NPC_SOLDIER": 2,
	"E_NPC_MONSTER": 3,
}

func (x E_NPC_TYPE) Enum() *E_NPC_TYPE {
	p := new(E_NPC_TYPE)
	*p = x
	return p
}
func (x E_NPC_TYPE) String() string {
	return proto.EnumName(E_NPC_TYPE_name, int32(x))
}
func (x *E_NPC_TYPE) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(E_NPC_TYPE_value, data, "E_NPC_TYPE")
	if err != nil {
		return err
	}
	*x = E_NPC_TYPE(value)
	return nil
}

type E_BUILDING int32

const (
	E_BUILDING_E_BUILDING_BEGIN        E_BUILDING = 0
	E_BUILDING_E_BUILDING_HALL         E_BUILDING = 1
	E_BUILDING_E_BUILDING_BARRACKS     E_BUILDING = 2
	E_BUILDING_E_BUILDING_SKY          E_BUILDING = 3
	E_BUILDING_E_BUILDING_GRANARY      E_BUILDING = 4
	E_BUILDING_E_BUILDING_BAR          E_BUILDING = 5
	E_BUILDING_E_BUILDING_JUN_JI_CHU   E_BUILDING = 6
	E_BUILDING_E_BUILDING_NUO_YI_ZHEN  E_BUILDING = 7
	E_BUILDING_E_BUILDING_ZHU_ZAO_FANG E_BUILDING = 8
	E_BUILDING_E_BUILDING_END          E_BUILDING = 9
)

var E_BUILDING_name = map[int32]string{
	0: "E_BUILDING_BEGIN",
	1: "E_BUILDING_HALL",
	2: "E_BUILDING_BARRACKS",
	3: "E_BUILDING_SKY",
	4: "E_BUILDING_GRANARY",
	5: "E_BUILDING_BAR",
	6: "E_BUILDING_JUN_JI_CHU",
	7: "E_BUILDING_NUO_YI_ZHEN",
	8: "E_BUILDING_ZHU_ZAO_FANG",
	9: "E_BUILDING_END",
}
var E_BUILDING_value = map[string]int32{
	"E_BUILDING_BEGIN":        0,
	"E_BUILDING_HALL":         1,
	"E_BUILDING_BARRACKS":     2,
	"E_BUILDING_SKY":          3,
	"E_BUILDING_GRANARY":      4,
	"E_BUILDING_BAR":          5,
	"E_BUILDING_JUN_JI_CHU":   6,
	"E_BUILDING_NUO_YI_ZHEN":  7,
	"E_BUILDING_ZHU_ZAO_FANG": 8,
	"E_BUILDING_END":          9,
}

func (x E_BUILDING) Enum() *E_BUILDING {
	p := new(E_BUILDING)
	*p = x
	return p
}
func (x E_BUILDING) String() string {
	return proto.EnumName(E_BUILDING_name, int32(x))
}
func (x *E_BUILDING) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(E_BUILDING_value, data, "E_BUILDING")
	if err != nil {
		return err
	}
	*x = E_BUILDING(value)
	return nil
}

// //////////////////////////////////////////////////
// 结构体
// //////////////////////////////////////////////////
// 服务器列表数据
type ListServT struct {
	Id               *uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Ip               *string `protobuf:"bytes,2,opt,name=ip" json:"ip,omitempty"`
	Port             *uint32 `protobuf:"varint,3,opt,name=port" json:"port,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ListServT) Reset()         { *m = ListServT{} }
func (m *ListServT) String() string { return proto.CompactTextString(m) }
func (*ListServT) ProtoMessage()    {}

func (m *ListServT) GetId() uint32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *ListServT) GetIp() string {
	if m != nil && m.Ip != nil {
		return *m.Ip
	}
	return ""
}

func (m *ListServT) GetPort() uint32 {
	if m != nil && m.Port != nil {
		return *m.Port
	}
	return 0
}

// 地图数据
type MapT struct {
	Type             *E_MAP_TYPE `protobuf:"varint,1,opt,name=type,enum=common_msg.E_MAP_TYPE" json:"type,omitempty"`
	Uid              *uint32     `protobuf:"varint,2,opt,name=uid" json:"uid,omitempty"`
	Id               *uint32     `protobuf:"varint,3,opt,name=id" json:"id,omitempty"`
	X                *float32    `protobuf:"fixed32,4,opt,name=x" json:"x,omitempty"`
	Y                *float32    `protobuf:"fixed32,5,opt,name=y" json:"y,omitempty"`
	Z                *float32    `protobuf:"fixed32,6,opt,name=z" json:"z,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *MapT) Reset()         { *m = MapT{} }
func (m *MapT) String() string { return proto.CompactTextString(m) }
func (*MapT) ProtoMessage()    {}

func (m *MapT) GetType() E_MAP_TYPE {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return E_MAP_TYPE_E_MAP_TYPE_PRIVATE
}

func (m *MapT) GetUid() uint32 {
	if m != nil && m.Uid != nil {
		return *m.Uid
	}
	return 0
}

func (m *MapT) GetId() uint32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *MapT) GetX() float32 {
	if m != nil && m.X != nil {
		return *m.X
	}
	return 0
}

func (m *MapT) GetY() float32 {
	if m != nil && m.Y != nil {
		return *m.Y
	}
	return 0
}

func (m *MapT) GetZ() float32 {
	if m != nil && m.Z != nil {
		return *m.Z
	}
	return 0
}

// 幻境阵容
type FairylandLineupT struct {
	LineupId         *uint32  `protobuf:"varint,1,opt,name=lineup_id" json:"lineup_id,omitempty"`
	HeroSoldierId    []uint32 `protobuf:"varint,2,rep,name=hero_soldier_id" json:"hero_soldier_id,omitempty"`
	ScencId          *uint32  `protobuf:"varint,3,opt,name=scenc_id" json:"scenc_id,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *FairylandLineupT) Reset()         { *m = FairylandLineupT{} }
func (m *FairylandLineupT) String() string { return proto.CompactTextString(m) }
func (*FairylandLineupT) ProtoMessage()    {}

func (m *FairylandLineupT) GetLineupId() uint32 {
	if m != nil && m.LineupId != nil {
		return *m.LineupId
	}
	return 0
}

func (m *FairylandLineupT) GetHeroSoldierId() []uint32 {
	if m != nil {
		return m.HeroSoldierId
	}
	return nil
}

func (m *FairylandLineupT) GetScencId() uint32 {
	if m != nil && m.ScencId != nil {
		return *m.ScencId
	}
	return 0
}

// 英雄阵容
type UserLineupT struct {
	LineupId         *uint32  `protobuf:"varint,1,opt,name=lineup_id" json:"lineup_id,omitempty"`
	HeroSoldierId    []uint32 `protobuf:"varint,2,rep,name=hero_soldier_id" json:"hero_soldier_id,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *UserLineupT) Reset()         { *m = UserLineupT{} }
func (m *UserLineupT) String() string { return proto.CompactTextString(m) }
func (*UserLineupT) ProtoMessage()    {}

func (m *UserLineupT) GetLineupId() uint32 {
	if m != nil && m.LineupId != nil {
		return *m.LineupId
	}
	return 0
}

func (m *UserLineupT) GetHeroSoldierId() []uint32 {
	if m != nil {
		return m.HeroSoldierId
	}
	return nil
}

// 资源阵容
type ResourceLineupT struct {
	LineupId         *uint32  `protobuf:"varint,1,opt,name=lineup_id" json:"lineup_id,omitempty"`
	HeroSoldierId    []uint32 `protobuf:"varint,2,rep,name=hero_soldier_id" json:"hero_soldier_id,omitempty"`
	ScencId          *uint32  `protobuf:"varint,3,opt,name=scenc_id" json:"scenc_id,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *ResourceLineupT) Reset()         { *m = ResourceLineupT{} }
func (m *ResourceLineupT) String() string { return proto.CompactTextString(m) }
func (*ResourceLineupT) ProtoMessage()    {}

func (m *ResourceLineupT) GetLineupId() uint32 {
	if m != nil && m.LineupId != nil {
		return *m.LineupId
	}
	return 0
}

func (m *ResourceLineupT) GetHeroSoldierId() []uint32 {
	if m != nil {
		return m.HeroSoldierId
	}
	return nil
}

func (m *ResourceLineupT) GetScencId() uint32 {
	if m != nil && m.ScencId != nil {
		return *m.ScencId
	}
	return 0
}

// 私有地图点数据
type PrivateMapPosT struct {
	Pos              *uint32          `protobuf:"varint,1,opt,name=pos" json:"pos,omitempty"`
	Idx              *uint32          `protobuf:"varint,2,opt,name=idx" json:"idx,omitempty"`
	OwnerUid         *uint32          `protobuf:"varint,3,opt,name=owner_uid" json:"owner_uid,omitempty"`
	GetResourceTime  *uint32          `protobuf:"varint,4,opt,name=get_resource_time" json:"get_resource_time,omitempty"`
	Mark             *uint32          `protobuf:"varint,5,opt,name=mark" json:"mark,omitempty"`
	Lineup           *ResourceLineupT `protobuf:"bytes,6,opt,name=lineup" json:"lineup,omitempty"`
	XXX_unrecognized []byte           `json:"-"`
}

func (m *PrivateMapPosT) Reset()         { *m = PrivateMapPosT{} }
func (m *PrivateMapPosT) String() string { return proto.CompactTextString(m) }
func (*PrivateMapPosT) ProtoMessage()    {}

func (m *PrivateMapPosT) GetPos() uint32 {
	if m != nil && m.Pos != nil {
		return *m.Pos
	}
	return 0
}

func (m *PrivateMapPosT) GetIdx() uint32 {
	if m != nil && m.Idx != nil {
		return *m.Idx
	}
	return 0
}

func (m *PrivateMapPosT) GetOwnerUid() uint32 {
	if m != nil && m.OwnerUid != nil {
		return *m.OwnerUid
	}
	return 0
}

func (m *PrivateMapPosT) GetGetResourceTime() uint32 {
	if m != nil && m.GetResourceTime != nil {
		return *m.GetResourceTime
	}
	return 0
}

func (m *PrivateMapPosT) GetMark() uint32 {
	if m != nil && m.Mark != nil {
		return *m.Mark
	}
	return 0
}

func (m *PrivateMapPosT) GetLineup() *ResourceLineupT {
	if m != nil {
		return m.Lineup
	}
	return nil
}

// 私有地图数据
type PrivateMapT struct {
	MapId            *uint32           `protobuf:"varint,1,opt,name=map_id" json:"map_id,omitempty"`
	Pos              []*PrivateMapPosT `protobuf:"bytes,2,rep,name=pos" json:"pos,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *PrivateMapT) Reset()         { *m = PrivateMapT{} }
func (m *PrivateMapT) String() string { return proto.CompactTextString(m) }
func (*PrivateMapT) ProtoMessage()    {}

func (m *PrivateMapT) GetMapId() uint32 {
	if m != nil && m.MapId != nil {
		return *m.MapId
	}
	return 0
}

func (m *PrivateMapT) GetPos() []*PrivateMapPosT {
	if m != nil {
		return m.Pos
	}
	return nil
}

// 返回的用户数据
type LoadUserT struct {
	Uid              *uint32 `protobuf:"varint,1,opt,name=uid" json:"uid,omitempty"`
	Nick             *string `protobuf:"bytes,2,opt,name=nick" json:"nick,omitempty"`
	LastLogoutTime   *uint32 `protobuf:"varint,3,opt,name=last_logout_time" json:"last_logout_time,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *LoadUserT) Reset()         { *m = LoadUserT{} }
func (m *LoadUserT) String() string { return proto.CompactTextString(m) }
func (*LoadUserT) ProtoMessage()    {}

func (m *LoadUserT) GetUid() uint32 {
	if m != nil && m.Uid != nil {
		return *m.Uid
	}
	return 0
}

func (m *LoadUserT) GetNick() string {
	if m != nil && m.Nick != nil {
		return *m.Nick
	}
	return ""
}

func (m *LoadUserT) GetLastLogoutTime() uint32 {
	if m != nil && m.LastLogoutTime != nil {
		return *m.LastLogoutTime
	}
	return 0
}

type EventT struct {
	Type             *uint32 `protobuf:"varint,1,opt,name=type" json:"type,omitempty"`
	Id               *uint32 `protobuf:"varint,2,opt,name=id" json:"id,omitempty"`
	Data             *uint32 `protobuf:"varint,3,opt,name=data" json:"data,omitempty"`
	Time             *uint32 `protobuf:"varint,4,opt,name=time" json:"time,omitempty"`
	StrData          *string `protobuf:"bytes,5,opt,name=str_data" json:"str_data,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *EventT) Reset()         { *m = EventT{} }
func (m *EventT) String() string { return proto.CompactTextString(m) }
func (*EventT) ProtoMessage()    {}

func (m *EventT) GetType() uint32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

func (m *EventT) GetId() uint32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *EventT) GetData() uint32 {
	if m != nil && m.Data != nil {
		return *m.Data
	}
	return 0
}

func (m *EventT) GetTime() uint32 {
	if m != nil && m.Time != nil {
		return *m.Time
	}
	return 0
}

func (m *EventT) GetStrData() string {
	if m != nil && m.StrData != nil {
		return *m.StrData
	}
	return ""
}

// 坐骑
type MountT struct {
	Id               *uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	State            *uint32 `protobuf:"varint,2,opt,name=state" json:"state,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *MountT) Reset()         { *m = MountT{} }
func (m *MountT) String() string { return proto.CompactTextString(m) }
func (*MountT) ProtoMessage()    {}

func (m *MountT) GetId() uint32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *MountT) GetState() uint32 {
	if m != nil && m.State != nil {
		return *m.State
	}
	return 0
}

// 坐骑
type MountCfgT struct {
	Id               *uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *MountCfgT) Reset()         { *m = MountCfgT{} }
func (m *MountCfgT) String() string { return proto.CompactTextString(m) }
func (*MountCfgT) ProtoMessage()    {}

func (m *MountCfgT) GetId() uint32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

// 英雄
type HeroT struct {
	Id               *uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Exp              *uint32 `protobuf:"varint,2,opt,name=exp" json:"exp,omitempty"`
	StarLevel        *uint32 `protobuf:"varint,3,opt,name=star_level" json:"star_level,omitempty"`
	Jingmai          *uint32 `protobuf:"varint,4,opt,name=jingmai" json:"jingmai,omitempty"`
	Equipment1       *uint32 `protobuf:"varint,5,opt,name=equipment1" json:"equipment1,omitempty"`
	Equipment2       *uint32 `protobuf:"varint,6,opt,name=equipment2" json:"equipment2,omitempty"`
	Equipment3       *uint32 `protobuf:"varint,7,opt,name=equipment3" json:"equipment3,omitempty"`
	Equipment4       *uint32 `protobuf:"varint,8,opt,name=equipment4" json:"equipment4,omitempty"`
	Equipment5       *uint32 `protobuf:"varint,9,opt,name=equipment5" json:"equipment5,omitempty"`
	SkillLevel1      *uint32 `protobuf:"varint,10,opt,name=skill_level1" json:"skill_level1,omitempty"`
	SkillLevel2      *uint32 `protobuf:"varint,11,opt,name=skill_level2" json:"skill_level2,omitempty"`
	SkillLevel3      *uint32 `protobuf:"varint,12,opt,name=skill_level3" json:"skill_level3,omitempty"`
	SkillLevel4      *uint32 `protobuf:"varint,13,opt,name=skill_level4" json:"skill_level4,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *HeroT) Reset()         { *m = HeroT{} }
func (m *HeroT) String() string { return proto.CompactTextString(m) }
func (*HeroT) ProtoMessage()    {}

func (m *HeroT) GetId() uint32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *HeroT) GetExp() uint32 {
	if m != nil && m.Exp != nil {
		return *m.Exp
	}
	return 0
}

func (m *HeroT) GetStarLevel() uint32 {
	if m != nil && m.StarLevel != nil {
		return *m.StarLevel
	}
	return 0
}

func (m *HeroT) GetJingmai() uint32 {
	if m != nil && m.Jingmai != nil {
		return *m.Jingmai
	}
	return 0
}

func (m *HeroT) GetEquipment1() uint32 {
	if m != nil && m.Equipment1 != nil {
		return *m.Equipment1
	}
	return 0
}

func (m *HeroT) GetEquipment2() uint32 {
	if m != nil && m.Equipment2 != nil {
		return *m.Equipment2
	}
	return 0
}

func (m *HeroT) GetEquipment3() uint32 {
	if m != nil && m.Equipment3 != nil {
		return *m.Equipment3
	}
	return 0
}

func (m *HeroT) GetEquipment4() uint32 {
	if m != nil && m.Equipment4 != nil {
		return *m.Equipment4
	}
	return 0
}

func (m *HeroT) GetEquipment5() uint32 {
	if m != nil && m.Equipment5 != nil {
		return *m.Equipment5
	}
	return 0
}

func (m *HeroT) GetSkillLevel1() uint32 {
	if m != nil && m.SkillLevel1 != nil {
		return *m.SkillLevel1
	}
	return 0
}

func (m *HeroT) GetSkillLevel2() uint32 {
	if m != nil && m.SkillLevel2 != nil {
		return *m.SkillLevel2
	}
	return 0
}

func (m *HeroT) GetSkillLevel3() uint32 {
	if m != nil && m.SkillLevel3 != nil {
		return *m.SkillLevel3
	}
	return 0
}

func (m *HeroT) GetSkillLevel4() uint32 {
	if m != nil && m.SkillLevel4 != nil {
		return *m.SkillLevel4
	}
	return 0
}

// 离线角色私有地图信息
type OfflineUserPrivateMapT struct {
	Uid              *uint32       `protobuf:"varint,1,opt,name=uid" json:"uid,omitempty"`
	Nick             *string       `protobuf:"bytes,2,opt,name=nick" json:"nick,omitempty"`
	Level            *uint32       `protobuf:"varint,3,opt,name=level" json:"level,omitempty"`
	Events           []*EventT     `protobuf:"bytes,4,rep,name=events" json:"events,omitempty"`
	Heros            []*HeroT      `protobuf:"bytes,5,rep,name=heros" json:"heros,omitempty"`
	Equipments       []*EquipmentT `protobuf:"bytes,6,rep,name=equipments" json:"equipments,omitempty"`
	XXX_unrecognized []byte        `json:"-"`
}

func (m *OfflineUserPrivateMapT) Reset()         { *m = OfflineUserPrivateMapT{} }
func (m *OfflineUserPrivateMapT) String() string { return proto.CompactTextString(m) }
func (*OfflineUserPrivateMapT) ProtoMessage()    {}

func (m *OfflineUserPrivateMapT) GetUid() uint32 {
	if m != nil && m.Uid != nil {
		return *m.Uid
	}
	return 0
}

func (m *OfflineUserPrivateMapT) GetNick() string {
	if m != nil && m.Nick != nil {
		return *m.Nick
	}
	return ""
}

func (m *OfflineUserPrivateMapT) GetLevel() uint32 {
	if m != nil && m.Level != nil {
		return *m.Level
	}
	return 0
}

func (m *OfflineUserPrivateMapT) GetEvents() []*EventT {
	if m != nil {
		return m.Events
	}
	return nil
}

func (m *OfflineUserPrivateMapT) GetHeros() []*HeroT {
	if m != nil {
		return m.Heros
	}
	return nil
}

func (m *OfflineUserPrivateMapT) GetEquipments() []*EquipmentT {
	if m != nil {
		return m.Equipments
	}
	return nil
}

// 士兵
type SoldierT struct {
	SoldierId        *uint32 `protobuf:"varint,1,opt,name=soldier_id" json:"soldier_id,omitempty"`
	SoldierCnt       *uint32 `protobuf:"varint,2,opt,name=soldier_cnt" json:"soldier_cnt,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *SoldierT) Reset()         { *m = SoldierT{} }
func (m *SoldierT) String() string { return proto.CompactTextString(m) }
func (*SoldierT) ProtoMessage()    {}

func (m *SoldierT) GetSoldierId() uint32 {
	if m != nil && m.SoldierId != nil {
		return *m.SoldierId
	}
	return 0
}

func (m *SoldierT) GetSoldierCnt() uint32 {
	if m != nil && m.SoldierCnt != nil {
		return *m.SoldierCnt
	}
	return 0
}

// 士兵等级
type SoldierLevelT struct {
	SoldierId        *uint32 `protobuf:"varint,1,opt,name=soldier_id" json:"soldier_id,omitempty"`
	SoldierLevel     *uint32 `protobuf:"varint,2,opt,name=soldier_level" json:"soldier_level,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *SoldierLevelT) Reset()         { *m = SoldierLevelT{} }
func (m *SoldierLevelT) String() string { return proto.CompactTextString(m) }
func (*SoldierLevelT) ProtoMessage()    {}

func (m *SoldierLevelT) GetSoldierId() uint32 {
	if m != nil && m.SoldierId != nil {
		return *m.SoldierId
	}
	return 0
}

func (m *SoldierLevelT) GetSoldierLevel() uint32 {
	if m != nil && m.SoldierLevel != nil {
		return *m.SoldierLevel
	}
	return 0
}

// 离线角色私有地图信息
type CliOfflineUserPrivateMapT struct {
	Uid              *uint32           `protobuf:"varint,1,opt,name=uid" json:"uid,omitempty"`
	Nick             *string           `protobuf:"bytes,2,opt,name=nick" json:"nick,omitempty"`
	Level            *uint32           `protobuf:"varint,3,opt,name=level" json:"level,omitempty"`
	FairylandOpen    *uint32           `protobuf:"varint,4,opt,name=fairyland_open" json:"fairyland_open,omitempty"`
	PrivateMaps      []*PrivateMapT    `protobuf:"bytes,5,rep,name=private_maps" json:"private_maps,omitempty"`
	FairylandLineup  *FairylandLineupT `protobuf:"bytes,6,opt,name=fairyland_lineup" json:"fairyland_lineup,omitempty"`
	Heros            []*HeroT          `protobuf:"bytes,7,rep,name=heros" json:"heros,omitempty"`
	Equipments       []*EquipmentT     `protobuf:"bytes,8,rep,name=equipments" json:"equipments,omitempty"`
	UseUid           *uint32           `protobuf:"varint,9,opt,name=use_uid" json:"use_uid,omitempty"`
	UserLineup       *UserLineupT      `protobuf:"bytes,10,opt,name=user_lineup" json:"user_lineup,omitempty"`
	SoldierLevel     []*SoldierLevelT  `protobuf:"bytes,11,rep,name=soldier_level" json:"soldier_level,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *CliOfflineUserPrivateMapT) Reset()         { *m = CliOfflineUserPrivateMapT{} }
func (m *CliOfflineUserPrivateMapT) String() string { return proto.CompactTextString(m) }
func (*CliOfflineUserPrivateMapT) ProtoMessage()    {}

func (m *CliOfflineUserPrivateMapT) GetUid() uint32 {
	if m != nil && m.Uid != nil {
		return *m.Uid
	}
	return 0
}

func (m *CliOfflineUserPrivateMapT) GetNick() string {
	if m != nil && m.Nick != nil {
		return *m.Nick
	}
	return ""
}

func (m *CliOfflineUserPrivateMapT) GetLevel() uint32 {
	if m != nil && m.Level != nil {
		return *m.Level
	}
	return 0
}

func (m *CliOfflineUserPrivateMapT) GetFairylandOpen() uint32 {
	if m != nil && m.FairylandOpen != nil {
		return *m.FairylandOpen
	}
	return 0
}

func (m *CliOfflineUserPrivateMapT) GetPrivateMaps() []*PrivateMapT {
	if m != nil {
		return m.PrivateMaps
	}
	return nil
}

func (m *CliOfflineUserPrivateMapT) GetFairylandLineup() *FairylandLineupT {
	if m != nil {
		return m.FairylandLineup
	}
	return nil
}

func (m *CliOfflineUserPrivateMapT) GetHeros() []*HeroT {
	if m != nil {
		return m.Heros
	}
	return nil
}

func (m *CliOfflineUserPrivateMapT) GetEquipments() []*EquipmentT {
	if m != nil {
		return m.Equipments
	}
	return nil
}

func (m *CliOfflineUserPrivateMapT) GetUseUid() uint32 {
	if m != nil && m.UseUid != nil {
		return *m.UseUid
	}
	return 0
}

func (m *CliOfflineUserPrivateMapT) GetUserLineup() *UserLineupT {
	if m != nil {
		return m.UserLineup
	}
	return nil
}

func (m *CliOfflineUserPrivateMapT) GetSoldierLevel() []*SoldierLevelT {
	if m != nil {
		return m.SoldierLevel
	}
	return nil
}

// 邮件
type MailT struct {
	Id               *uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Uid              *uint32 `protobuf:"varint,2,opt,name=uid" json:"uid,omitempty"`
	State            *uint32 `protobuf:"varint,3,opt,name=state" json:"state,omitempty"`
	MailId           *uint32 `protobuf:"varint,4,opt,name=mail_id" json:"mail_id,omitempty"`
	Arg              *string `protobuf:"bytes,5,opt,name=arg" json:"arg,omitempty"`
	Attachment       *string `protobuf:"bytes,6,opt,name=attachment" json:"attachment,omitempty"`
	Time             *uint32 `protobuf:"varint,7,opt,name=time" json:"time,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *MailT) Reset()         { *m = MailT{} }
func (m *MailT) String() string { return proto.CompactTextString(m) }
func (*MailT) ProtoMessage()    {}

func (m *MailT) GetId() uint32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *MailT) GetUid() uint32 {
	if m != nil && m.Uid != nil {
		return *m.Uid
	}
	return 0
}

func (m *MailT) GetState() uint32 {
	if m != nil && m.State != nil {
		return *m.State
	}
	return 0
}

func (m *MailT) GetMailId() uint32 {
	if m != nil && m.MailId != nil {
		return *m.MailId
	}
	return 0
}

func (m *MailT) GetArg() string {
	if m != nil && m.Arg != nil {
		return *m.Arg
	}
	return ""
}

func (m *MailT) GetAttachment() string {
	if m != nil && m.Attachment != nil {
		return *m.Attachment
	}
	return ""
}

func (m *MailT) GetTime() uint32 {
	if m != nil && m.Time != nil {
		return *m.Time
	}
	return 0
}

// 地图中的玩家数据
type MapUserT struct {
	Uid              *uint32  `protobuf:"varint,1,opt,name=uid" json:"uid,omitempty"`
	Nick             *string  `protobuf:"bytes,2,opt,name=nick" json:"nick,omitempty"`
	X                *float32 `protobuf:"fixed32,3,opt,name=x" json:"x,omitempty"`
	Y                *float32 `protobuf:"fixed32,4,opt,name=y" json:"y,omitempty"`
	MountId          *uint32  `protobuf:"varint,5,opt,name=mount_id" json:"mount_id,omitempty"`
	Z                *float32 `protobuf:"fixed32,6,opt,name=z" json:"z,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *MapUserT) Reset()         { *m = MapUserT{} }
func (m *MapUserT) String() string { return proto.CompactTextString(m) }
func (*MapUserT) ProtoMessage()    {}

func (m *MapUserT) GetUid() uint32 {
	if m != nil && m.Uid != nil {
		return *m.Uid
	}
	return 0
}

func (m *MapUserT) GetNick() string {
	if m != nil && m.Nick != nil {
		return *m.Nick
	}
	return ""
}

func (m *MapUserT) GetX() float32 {
	if m != nil && m.X != nil {
		return *m.X
	}
	return 0
}

func (m *MapUserT) GetY() float32 {
	if m != nil && m.Y != nil {
		return *m.Y
	}
	return 0
}

func (m *MapUserT) GetMountId() uint32 {
	if m != nil && m.MountId != nil {
		return *m.MountId
	}
	return 0
}

func (m *MapUserT) GetZ() float32 {
	if m != nil && m.Z != nil {
		return *m.Z
	}
	return 0
}

// 任务数据
type TaskT struct {
	MajorId          *uint32 `protobuf:"varint,1,opt,name=major_id" json:"major_id,omitempty"`
	MinorId          *uint32 `protobuf:"varint,2,opt,name=minor_id" json:"minor_id,omitempty"`
	Data             *uint32 `protobuf:"varint,3,opt,name=data" json:"data,omitempty"`
	StrData          *string `protobuf:"bytes,4,opt,name=str_data" json:"str_data,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *TaskT) Reset()         { *m = TaskT{} }
func (m *TaskT) String() string { return proto.CompactTextString(m) }
func (*TaskT) ProtoMessage()    {}

func (m *TaskT) GetMajorId() uint32 {
	if m != nil && m.MajorId != nil {
		return *m.MajorId
	}
	return 0
}

func (m *TaskT) GetMinorId() uint32 {
	if m != nil && m.MinorId != nil {
		return *m.MinorId
	}
	return 0
}

func (m *TaskT) GetData() uint32 {
	if m != nil && m.Data != nil {
		return *m.Data
	}
	return 0
}

func (m *TaskT) GetStrData() string {
	if m != nil && m.StrData != nil {
		return *m.StrData
	}
	return ""
}

// 道具
type ItemT struct {
	Id               *uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Bind             *uint32 `protobuf:"varint,2,opt,name=bind" json:"bind,omitempty"`
	Cnt              *uint32 `protobuf:"varint,3,opt,name=cnt" json:"cnt,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ItemT) Reset()         { *m = ItemT{} }
func (m *ItemT) String() string { return proto.CompactTextString(m) }
func (*ItemT) ProtoMessage()    {}

func (m *ItemT) GetId() uint32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *ItemT) GetBind() uint32 {
	if m != nil && m.Bind != nil {
		return *m.Bind
	}
	return 0
}

func (m *ItemT) GetCnt() uint32 {
	if m != nil && m.Cnt != nil {
		return *m.Cnt
	}
	return 0
}

// 道具
type ItemCfgT struct {
	Id               *uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ItemCfgT) Reset()         { *m = ItemCfgT{} }
func (m *ItemCfgT) String() string { return proto.CompactTextString(m) }
func (*ItemCfgT) ProtoMessage()    {}

func (m *ItemCfgT) GetId() uint32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

// 装备
type EquipmentT struct {
	Idx              *uint32 `protobuf:"varint,1,opt,name=idx" json:"idx,omitempty"`
	Uid              *uint32 `protobuf:"varint,2,opt,name=uid" json:"uid,omitempty"`
	Id               *uint32 `protobuf:"varint,3,opt,name=id" json:"id,omitempty"`
	Bind             *uint32 `protobuf:"varint,4,opt,name=bind" json:"bind,omitempty"`
	RandomAttribute  *string `protobuf:"bytes,5,opt,name=random_attribute" json:"random_attribute,omitempty"`
	Exp              *uint32 `protobuf:"varint,6,opt,name=exp" json:"exp,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *EquipmentT) Reset()         { *m = EquipmentT{} }
func (m *EquipmentT) String() string { return proto.CompactTextString(m) }
func (*EquipmentT) ProtoMessage()    {}

func (m *EquipmentT) GetIdx() uint32 {
	if m != nil && m.Idx != nil {
		return *m.Idx
	}
	return 0
}

func (m *EquipmentT) GetUid() uint32 {
	if m != nil && m.Uid != nil {
		return *m.Uid
	}
	return 0
}

func (m *EquipmentT) GetId() uint32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *EquipmentT) GetBind() uint32 {
	if m != nil && m.Bind != nil {
		return *m.Bind
	}
	return 0
}

func (m *EquipmentT) GetRandomAttribute() string {
	if m != nil && m.RandomAttribute != nil {
		return *m.RandomAttribute
	}
	return ""
}

func (m *EquipmentT) GetExp() uint32 {
	if m != nil && m.Exp != nil {
		return *m.Exp
	}
	return 0
}

// 装备配置属性
type EquipmentCfgT struct {
	Id               *uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Position         *uint32 `protobuf:"varint,2,opt,name=position" json:"position,omitempty"`
	Quality          *uint32 `protobuf:"varint,3,opt,name=quality" json:"quality,omitempty"`
	EquipLv          *uint32 `protobuf:"varint,4,opt,name=equip_lv" json:"equip_lv,omitempty"`
	RandomId         *uint32 `protobuf:"varint,5,opt,name=random_id" json:"random_id,omitempty"`
	Bind             *uint32 `protobuf:"varint,6,opt,name=bind" json:"bind,omitempty"`
	GrowId           *uint32 `protobuf:"varint,7,opt,name=grow_id" json:"grow_id,omitempty"`
	Exp              *uint32 `protobuf:"varint,8,opt,name=exp" json:"exp,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *EquipmentCfgT) Reset()         { *m = EquipmentCfgT{} }
func (m *EquipmentCfgT) String() string { return proto.CompactTextString(m) }
func (*EquipmentCfgT) ProtoMessage()    {}

func (m *EquipmentCfgT) GetId() uint32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *EquipmentCfgT) GetPosition() uint32 {
	if m != nil && m.Position != nil {
		return *m.Position
	}
	return 0
}

func (m *EquipmentCfgT) GetQuality() uint32 {
	if m != nil && m.Quality != nil {
		return *m.Quality
	}
	return 0
}

func (m *EquipmentCfgT) GetEquipLv() uint32 {
	if m != nil && m.EquipLv != nil {
		return *m.EquipLv
	}
	return 0
}

func (m *EquipmentCfgT) GetRandomId() uint32 {
	if m != nil && m.RandomId != nil {
		return *m.RandomId
	}
	return 0
}

func (m *EquipmentCfgT) GetBind() uint32 {
	if m != nil && m.Bind != nil {
		return *m.Bind
	}
	return 0
}

func (m *EquipmentCfgT) GetGrowId() uint32 {
	if m != nil && m.GrowId != nil {
		return *m.GrowId
	}
	return 0
}

func (m *EquipmentCfgT) GetExp() uint32 {
	if m != nil && m.Exp != nil {
		return *m.Exp
	}
	return 0
}

// pve战斗中奖励
type PveIngRewardT struct {
	MajorIdx         *uint32       `protobuf:"varint,1,opt,name=major_idx" json:"major_idx,omitempty"`
	MinorIdx         *uint32       `protobuf:"varint,2,opt,name=minor_idx" json:"minor_idx,omitempty"`
	Item             []*ItemT      `protobuf:"bytes,3,rep,name=item" json:"item,omitempty"`
	Equipment        []*EquipmentT `protobuf:"bytes,4,rep,name=equipment" json:"equipment,omitempty"`
	XXX_unrecognized []byte        `json:"-"`
}

func (m *PveIngRewardT) Reset()         { *m = PveIngRewardT{} }
func (m *PveIngRewardT) String() string { return proto.CompactTextString(m) }
func (*PveIngRewardT) ProtoMessage()    {}

func (m *PveIngRewardT) GetMajorIdx() uint32 {
	if m != nil && m.MajorIdx != nil {
		return *m.MajorIdx
	}
	return 0
}

func (m *PveIngRewardT) GetMinorIdx() uint32 {
	if m != nil && m.MinorIdx != nil {
		return *m.MinorIdx
	}
	return 0
}

func (m *PveIngRewardT) GetItem() []*ItemT {
	if m != nil {
		return m.Item
	}
	return nil
}

func (m *PveIngRewardT) GetEquipment() []*EquipmentT {
	if m != nil {
		return m.Equipment
	}
	return nil
}

// 奖励
type RewardT struct {
	Item             []*ItemT      `protobuf:"bytes,1,rep,name=item" json:"item,omitempty"`
	Equipment        []*EquipmentT `protobuf:"bytes,2,rep,name=equipment" json:"equipment,omitempty"`
	Hero             []*HeroT      `protobuf:"bytes,3,rep,name=hero" json:"hero,omitempty"`
	XXX_unrecognized []byte        `json:"-"`
}

func (m *RewardT) Reset()         { *m = RewardT{} }
func (m *RewardT) String() string { return proto.CompactTextString(m) }
func (*RewardT) ProtoMessage()    {}

func (m *RewardT) GetItem() []*ItemT {
	if m != nil {
		return m.Item
	}
	return nil
}

func (m *RewardT) GetEquipment() []*EquipmentT {
	if m != nil {
		return m.Equipment
	}
	return nil
}

func (m *RewardT) GetHero() []*HeroT {
	if m != nil {
		return m.Hero
	}
	return nil
}

// 奖励
type BuildingT struct {
	BuildingId       *uint32 `protobuf:"varint,1,opt,name=building_id" json:"building_id,omitempty"`
	BuildingLevel    *uint32 `protobuf:"varint,2,opt,name=building_level" json:"building_level,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *BuildingT) Reset()         { *m = BuildingT{} }
func (m *BuildingT) String() string { return proto.CompactTextString(m) }
func (*BuildingT) ProtoMessage()    {}

func (m *BuildingT) GetBuildingId() uint32 {
	if m != nil && m.BuildingId != nil {
		return *m.BuildingId
	}
	return 0
}

func (m *BuildingT) GetBuildingLevel() uint32 {
	if m != nil && m.BuildingLevel != nil {
		return *m.BuildingLevel
	}
	return 0
}

// 布阵的结构(客户端用)
type EmbattleT struct {
	EmbattleId       *uint32         `protobuf:"varint,1,opt,name=embattle_id" json:"embattle_id,omitempty"`
	PosList          []*EmbattlePosT `protobuf:"bytes,2,rep,name=posList" json:"posList,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *EmbattleT) Reset()         { *m = EmbattleT{} }
func (m *EmbattleT) String() string { return proto.CompactTextString(m) }
func (*EmbattleT) ProtoMessage()    {}

func (m *EmbattleT) GetEmbattleId() uint32 {
	if m != nil && m.EmbattleId != nil {
		return *m.EmbattleId
	}
	return 0
}

func (m *EmbattleT) GetPosList() []*EmbattlePosT {
	if m != nil {
		return m.PosList
	}
	return nil
}

// 布阵的结构(客户端用)
type EmbattlePosT struct {
	Index            *uint32 `protobuf:"varint,1,opt,name=index" json:"index,omitempty"`
	Id               *uint32 `protobuf:"varint,2,opt,name=id" json:"id,omitempty"`
	Type             *uint32 `protobuf:"varint,3,opt,name=type" json:"type,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *EmbattlePosT) Reset()         { *m = EmbattlePosT{} }
func (m *EmbattlePosT) String() string { return proto.CompactTextString(m) }
func (*EmbattlePosT) ProtoMessage()    {}

func (m *EmbattlePosT) GetIndex() uint32 {
	if m != nil && m.Index != nil {
		return *m.Index
	}
	return 0
}

func (m *EmbattlePosT) GetId() uint32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *EmbattlePosT) GetType() uint32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

func init() {
	proto.RegisterEnum("common_msg.E_ERROR_CODE", E_ERROR_CODE_name, E_ERROR_CODE_value)
	proto.RegisterEnum("common_msg.USER_EVENT_TYPE", USER_EVENT_TYPE_name, USER_EVENT_TYPE_value)
	proto.RegisterEnum("common_msg.E_PLATFORM", E_PLATFORM_name, E_PLATFORM_value)
	proto.RegisterEnum("common_msg.E_CHAT_TYPE", E_CHAT_TYPE_name, E_CHAT_TYPE_value)
	proto.RegisterEnum("common_msg.E_MAP_TYPE", E_MAP_TYPE_name, E_MAP_TYPE_value)
	proto.RegisterEnum("common_msg.E_PRIVATE_MAP_POS_TYPE", E_PRIVATE_MAP_POS_TYPE_name, E_PRIVATE_MAP_POS_TYPE_value)
	proto.RegisterEnum("common_msg.E_MOUNT_STATE", E_MOUNT_STATE_name, E_MOUNT_STATE_value)
	proto.RegisterEnum("common_msg.E_TASK_TYPE", E_TASK_TYPE_name, E_TASK_TYPE_value)
	proto.RegisterEnum("common_msg.E_TASK_STATE", E_TASK_STATE_name, E_TASK_STATE_value)
	proto.RegisterEnum("common_msg.E_MAIL_STATE", E_MAIL_STATE_name, E_MAIL_STATE_value)
	proto.RegisterEnum("common_msg.E_COMMON_VAL", E_COMMON_VAL_name, E_COMMON_VAL_value)
	proto.RegisterEnum("common_msg.E_EQUIPMENT_POSITION", E_EQUIPMENT_POSITION_name, E_EQUIPMENT_POSITION_value)
	proto.RegisterEnum("common_msg.E_EQUIPMENT_QUALITY", E_EQUIPMENT_QUALITY_name, E_EQUIPMENT_QUALITY_value)
	proto.RegisterEnum("common_msg.E_NPC_TYPE", E_NPC_TYPE_name, E_NPC_TYPE_value)
	proto.RegisterEnum("common_msg.E_BUILDING", E_BUILDING_name, E_BUILDING_value)
}
