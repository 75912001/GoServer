// Code generated by protoc-gen-go.
// source: pb_common.proto
// DO NOT EDIT!

/*
Package pb_common is a generated protocol buffer package.

It is generated from these files:
	pb_common.proto

It has these top-level messages:
	UserT
	EventT
	ItemT
*/
package pb_common

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// ////////////////////////////////////////////
// 错误码
// ////////////////////////////////////////////
type E_ERROR_CODE int32

const (
	// 通用错误
	E_ERROR_CODE_EEC_SUCCESS            E_ERROR_CODE = 0
	E_ERROR_CODE_EEC_ERROR              E_ERROR_CODE = 1
	E_ERROR_CODE_EEC_VALUE_INVALID      E_ERROR_CODE = 2
	E_ERROR_CODE_EEC_ITEM_CNT           E_ERROR_CODE = 3
	E_ERROR_CODE_EEC_ITEM_INEXISTENT    E_ERROR_CODE = 4
	E_ERROR_CODE_EEC_USER_INEXISTENT    E_ERROR_CODE = 5
	E_ERROR_CODE_EEC_ROLE_EXISTENT_ROLE E_ERROR_CODE = 6
	E_ERROR_CODE_EEC_ACCOUNT_INEXISTENT E_ERROR_CODE = 7
	E_ERROR_CODE_EEC_APPROVED_NO        E_ERROR_CODE = 8
	E_ERROR_CODE_EEC_EVENT_LIMIT        E_ERROR_CODE = 9
	E_ERROR_CODE_EEC_USER_LEVEL         E_ERROR_CODE = 10
	E_ERROR_CODE_EEC_PASSWORD_ERROR     E_ERROR_CODE = 14
	E_ERROR_CODE_EEC_CHAT_LEN_MAX       E_ERROR_CODE = 15
	E_ERROR_CODE_EEC_ERROR_MYSQL        E_ERROR_CODE = 9000
	E_ERROR_CODE_EEC_MAX                E_ERROR_CODE = 10000
)

var E_ERROR_CODE_name = map[int32]string{
	0:     "EEC_SUCCESS",
	1:     "EEC_ERROR",
	2:     "EEC_VALUE_INVALID",
	3:     "EEC_ITEM_CNT",
	4:     "EEC_ITEM_INEXISTENT",
	5:     "EEC_USER_INEXISTENT",
	6:     "EEC_ROLE_EXISTENT_ROLE",
	7:     "EEC_ACCOUNT_INEXISTENT",
	8:     "EEC_APPROVED_NO",
	9:     "EEC_EVENT_LIMIT",
	10:    "EEC_USER_LEVEL",
	14:    "EEC_PASSWORD_ERROR",
	15:    "EEC_CHAT_LEN_MAX",
	9000:  "EEC_ERROR_MYSQL",
	10000: "EEC_MAX",
}
var E_ERROR_CODE_value = map[string]int32{
	"EEC_SUCCESS":            0,
	"EEC_ERROR":              1,
	"EEC_VALUE_INVALID":      2,
	"EEC_ITEM_CNT":           3,
	"EEC_ITEM_INEXISTENT":    4,
	"EEC_USER_INEXISTENT":    5,
	"EEC_ROLE_EXISTENT_ROLE": 6,
	"EEC_ACCOUNT_INEXISTENT": 7,
	"EEC_APPROVED_NO":        8,
	"EEC_EVENT_LIMIT":        9,
	"EEC_USER_LEVEL":         10,
	"EEC_PASSWORD_ERROR":     14,
	"EEC_CHAT_LEN_MAX":       15,
	"EEC_ERROR_MYSQL":        9000,
	"EEC_MAX":                10000,
}

func (x E_ERROR_CODE) Enum() *E_ERROR_CODE {
	p := new(E_ERROR_CODE)
	*p = x
	return p
}
func (x E_ERROR_CODE) String() string {
	return proto.EnumName(E_ERROR_CODE_name, int32(x))
}
func (x *E_ERROR_CODE) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(E_ERROR_CODE_value, data, "E_ERROR_CODE")
	if err != nil {
		return err
	}
	*x = E_ERROR_CODE(value)
	return nil
}

type USER_EVENT_TYPE int32

const (
	// ----------------------------------------------------------------------------
	// 每日事件 DAILY_EVENT_XX
	USER_EVENT_TYPE_DAILY_EVENT_BEGIN USER_EVENT_TYPE = 100000
	USER_EVENT_TYPE_DAILY_EVENT_END   USER_EVENT_TYPE = 199999
	// ----------------------------------------------------------------------------
	// 每周事件 WEEKLY_EVENT_XX
	USER_EVENT_TYPE_WEEKLY_EVENT_BEGIN USER_EVENT_TYPE = 200000
	USER_EVENT_TYPE_WEEKLY_EVENT_END   USER_EVENT_TYPE = 299999
	// ----------------------------------------------------------------------------
	// 每月事件 MONTHLY_EVENT_XX
	USER_EVENT_TYPE_MONTHLY_EVENT_BEGIN USER_EVENT_TYPE = 300000
	USER_EVENT_TYPE_MONTHLY_EVENT_END   USER_EVENT_TYPE = 399999
	// ----------------------------------------------------------------------------
	// 永久事件 FOREVER_EVENT_XX
	USER_EVENT_TYPE_FOREVER_EVENT_BEGIN USER_EVENT_TYPE = 400000
	USER_EVENT_TYPE_FOREVER_EVENT_END   USER_EVENT_TYPE = 499999
	// ----------------------------------------------------------------------------
	// 过期事件 EXPRIE_EVENT_XX
	USER_EVENT_TYPE_EXPRIE_EVENT_BEGIN USER_EVENT_TYPE = 500000
	USER_EVENT_TYPE_EXPRIE_EVENT_END   USER_EVENT_TYPE = 599999
)

var USER_EVENT_TYPE_name = map[int32]string{
	100000: "DAILY_EVENT_BEGIN",
	199999: "DAILY_EVENT_END",
	200000: "WEEKLY_EVENT_BEGIN",
	299999: "WEEKLY_EVENT_END",
	300000: "MONTHLY_EVENT_BEGIN",
	399999: "MONTHLY_EVENT_END",
	400000: "FOREVER_EVENT_BEGIN",
	499999: "FOREVER_EVENT_END",
	500000: "EXPRIE_EVENT_BEGIN",
	599999: "EXPRIE_EVENT_END",
}
var USER_EVENT_TYPE_value = map[string]int32{
	"DAILY_EVENT_BEGIN":   100000,
	"DAILY_EVENT_END":     199999,
	"WEEKLY_EVENT_BEGIN":  200000,
	"WEEKLY_EVENT_END":    299999,
	"MONTHLY_EVENT_BEGIN": 300000,
	"MONTHLY_EVENT_END":   399999,
	"FOREVER_EVENT_BEGIN": 400000,
	"FOREVER_EVENT_END":   499999,
	"EXPRIE_EVENT_BEGIN":  500000,
	"EXPRIE_EVENT_END":    599999,
}

func (x USER_EVENT_TYPE) Enum() *USER_EVENT_TYPE {
	p := new(USER_EVENT_TYPE)
	*p = x
	return p
}
func (x USER_EVENT_TYPE) String() string {
	return proto.EnumName(USER_EVENT_TYPE_name, int32(x))
}
func (x *USER_EVENT_TYPE) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(USER_EVENT_TYPE_value, data, "USER_EVENT_TYPE")
	if err != nil {
		return err
	}
	*x = USER_EVENT_TYPE(value)
	return nil
}

// 平台类型
type E_PLATFORM int32

const (
	E_PLATFORM_E_PLATFORM_TEST E_PLATFORM = 0
)

var E_PLATFORM_name = map[int32]string{
	0: "E_PLATFORM_TEST",
}
var E_PLATFORM_value = map[string]int32{
	"E_PLATFORM_TEST": 0,
}

func (x E_PLATFORM) Enum() *E_PLATFORM {
	p := new(E_PLATFORM)
	*p = x
	return p
}
func (x E_PLATFORM) String() string {
	return proto.EnumName(E_PLATFORM_name, int32(x))
}
func (x *E_PLATFORM) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(E_PLATFORM_value, data, "E_PLATFORM")
	if err != nil {
		return err
	}
	*x = E_PLATFORM(value)
	return nil
}

// 聊天类型
type E_CHAT_TYPE int32

const (
	E_CHAT_TYPE_E_CHAT_TYPE_PRIVATE E_CHAT_TYPE = 0
	E_CHAT_TYPE_E_CHAT_TYPE_ALL     E_CHAT_TYPE = 2
)

var E_CHAT_TYPE_name = map[int32]string{
	0: "E_CHAT_TYPE_PRIVATE",
	2: "E_CHAT_TYPE_ALL",
}
var E_CHAT_TYPE_value = map[string]int32{
	"E_CHAT_TYPE_PRIVATE": 0,
	"E_CHAT_TYPE_ALL":     2,
}

func (x E_CHAT_TYPE) Enum() *E_CHAT_TYPE {
	p := new(E_CHAT_TYPE)
	*p = x
	return p
}
func (x E_CHAT_TYPE) String() string {
	return proto.EnumName(E_CHAT_TYPE_name, int32(x))
}
func (x *E_CHAT_TYPE) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(E_CHAT_TYPE_value, data, "E_CHAT_TYPE")
	if err != nil {
		return err
	}
	*x = E_CHAT_TYPE(value)
	return nil
}

// 邮件状态
type E_MAIL_STATE int32

const (
	E_MAIL_STATE_E_MAIL_STATE_UNREAD E_MAIL_STATE = 0
	E_MAIL_STATE_E_MAIL_STATE_READ   E_MAIL_STATE = 1
)

var E_MAIL_STATE_name = map[int32]string{
	0: "E_MAIL_STATE_UNREAD",
	1: "E_MAIL_STATE_READ",
}
var E_MAIL_STATE_value = map[string]int32{
	"E_MAIL_STATE_UNREAD": 0,
	"E_MAIL_STATE_READ":   1,
}

func (x E_MAIL_STATE) Enum() *E_MAIL_STATE {
	p := new(E_MAIL_STATE)
	*p = x
	return p
}
func (x E_MAIL_STATE) String() string {
	return proto.EnumName(E_MAIL_STATE_name, int32(x))
}
func (x *E_MAIL_STATE) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(E_MAIL_STATE_value, data, "E_MAIL_STATE")
	if err != nil {
		return err
	}
	*x = E_MAIL_STATE(value)
	return nil
}

// 通用值
type E_COMMON_VAL int32

const (
	E_COMMON_VAL_E_COMMON_FRIEND_CNT_MAX E_COMMON_VAL = 100
)

var E_COMMON_VAL_name = map[int32]string{
	100: "E_COMMON_FRIEND_CNT_MAX",
}
var E_COMMON_VAL_value = map[string]int32{
	"E_COMMON_FRIEND_CNT_MAX": 100,
}

func (x E_COMMON_VAL) Enum() *E_COMMON_VAL {
	p := new(E_COMMON_VAL)
	*p = x
	return p
}
func (x E_COMMON_VAL) String() string {
	return proto.EnumName(E_COMMON_VAL_name, int32(x))
}
func (x *E_COMMON_VAL) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(E_COMMON_VAL_value, data, "E_COMMON_VAL")
	if err != nil {
		return err
	}
	*x = E_COMMON_VAL(value)
	return nil
}

type E_USER_ONLINE_STATE int32

const (
	E_USER_ONLINE_STATE_E_FRIEND_STATE_OFFLINE E_USER_ONLINE_STATE = 0
	E_USER_ONLINE_STATE_E_FRIEND_STATE_ONLINE  E_USER_ONLINE_STATE = 1
)

var E_USER_ONLINE_STATE_name = map[int32]string{
	0: "E_FRIEND_STATE_OFFLINE",
	1: "E_FRIEND_STATE_ONLINE",
}
var E_USER_ONLINE_STATE_value = map[string]int32{
	"E_FRIEND_STATE_OFFLINE": 0,
	"E_FRIEND_STATE_ONLINE":  1,
}

func (x E_USER_ONLINE_STATE) Enum() *E_USER_ONLINE_STATE {
	p := new(E_USER_ONLINE_STATE)
	*p = x
	return p
}
func (x E_USER_ONLINE_STATE) String() string {
	return proto.EnumName(E_USER_ONLINE_STATE_name, int32(x))
}
func (x *E_USER_ONLINE_STATE) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(E_USER_ONLINE_STATE_value, data, "E_USER_ONLINE_STATE")
	if err != nil {
		return err
	}
	*x = E_USER_ONLINE_STATE(value)
	return nil
}

// 返回的用户数据
type UserT struct {
	Uid              *uint32 `protobuf:"varint,1,opt,name=uid" json:"uid,omitempty"`
	Nick             *string `protobuf:"bytes,2,opt,name=nick" json:"nick,omitempty"`
	LastLogoutTime   *uint32 `protobuf:"varint,3,opt,name=last_logout_time" json:"last_logout_time,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *UserT) Reset()         { *m = UserT{} }
func (m *UserT) String() string { return proto.CompactTextString(m) }
func (*UserT) ProtoMessage()    {}

func (m *UserT) GetUid() uint32 {
	if m != nil && m.Uid != nil {
		return *m.Uid
	}
	return 0
}

func (m *UserT) GetNick() string {
	if m != nil && m.Nick != nil {
		return *m.Nick
	}
	return ""
}

func (m *UserT) GetLastLogoutTime() uint32 {
	if m != nil && m.LastLogoutTime != nil {
		return *m.LastLogoutTime
	}
	return 0
}

// 事件
type EventT struct {
	Type             *uint32 `protobuf:"varint,1,opt,name=type" json:"type,omitempty"`
	Id               *uint32 `protobuf:"varint,2,opt,name=id" json:"id,omitempty"`
	Data             *uint32 `protobuf:"varint,3,opt,name=data" json:"data,omitempty"`
	Time             *uint32 `protobuf:"varint,4,opt,name=time" json:"time,omitempty"`
	StrData          *string `protobuf:"bytes,5,opt,name=str_data" json:"str_data,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *EventT) Reset()         { *m = EventT{} }
func (m *EventT) String() string { return proto.CompactTextString(m) }
func (*EventT) ProtoMessage()    {}

func (m *EventT) GetType() uint32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

func (m *EventT) GetId() uint32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *EventT) GetData() uint32 {
	if m != nil && m.Data != nil {
		return *m.Data
	}
	return 0
}

func (m *EventT) GetTime() uint32 {
	if m != nil && m.Time != nil {
		return *m.Time
	}
	return 0
}

func (m *EventT) GetStrData() string {
	if m != nil && m.StrData != nil {
		return *m.StrData
	}
	return ""
}

// //////////////////////////////////////////////////
// 道具
type ItemT struct {
	Id               *uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Cnt              *uint32 `protobuf:"varint,3,opt,name=cnt" json:"cnt,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ItemT) Reset()         { *m = ItemT{} }
func (m *ItemT) String() string { return proto.CompactTextString(m) }
func (*ItemT) ProtoMessage()    {}

func (m *ItemT) GetId() uint32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *ItemT) GetCnt() uint32 {
	if m != nil && m.Cnt != nil {
		return *m.Cnt
	}
	return 0
}

func init() {
	proto.RegisterType((*UserT)(nil), "pb_common.user_t")
	proto.RegisterType((*EventT)(nil), "pb_common.event_t")
	proto.RegisterType((*ItemT)(nil), "pb_common.item_t")
	proto.RegisterEnum("pb_common.E_ERROR_CODE", E_ERROR_CODE_name, E_ERROR_CODE_value)
	proto.RegisterEnum("pb_common.USER_EVENT_TYPE", USER_EVENT_TYPE_name, USER_EVENT_TYPE_value)
	proto.RegisterEnum("pb_common.E_PLATFORM", E_PLATFORM_name, E_PLATFORM_value)
	proto.RegisterEnum("pb_common.E_CHAT_TYPE", E_CHAT_TYPE_name, E_CHAT_TYPE_value)
	proto.RegisterEnum("pb_common.E_MAIL_STATE", E_MAIL_STATE_name, E_MAIL_STATE_value)
	proto.RegisterEnum("pb_common.E_COMMON_VAL", E_COMMON_VAL_name, E_COMMON_VAL_value)
	proto.RegisterEnum("pb_common.E_USER_ONLINE_STATE", E_USER_ONLINE_STATE_name, E_USER_ONLINE_STATE_value)
}
